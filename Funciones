#Funciones_del_juego
import pygame as pg
import time
import random
import sys


#matrices 

def matriz_de_10x10():
    matriz_final = []
    for i in range(10):
        fila = [0] *10
        matriz_final.append(fila)
    
    
        
        
    return matriz_final
    

def matriz_de_20x20():
    matriz_final = []
    for i in range(20):
        fila = [0] *20
        matriz_final.append(fila)
        
        
        
    return matriz_final




def matriz_de_40x40():
    matriz_final = []
    for i in range(40):
        fila = [0]  *40
        matriz_final.append(fila)
        
        
        
    return matriz_final





def barcos_de_matriz_10(matriz)-> list:

    #REFORME DEL CODIGO DE BARCOS, USAR ESTE

    unos = [
            (1, 4),  #1 grupo de largo 4 (acorazado)
            (2, 3),  #2 grupos de largo 3 (cruceros)
            (3, 2),  #3 grupos de largo 2 (destructores)
            (4, 1),  #4 uno solo (submarino)
        
        ]

    for tupla in unos: #separo la tupla en 2, IZQ= cantidad de unos, DER= veces que se insertan los unos de la izquierda
        cantidad = tupla[0] 
        largo = tupla[1]
        for i in range(cantidad):
            colocado = False
            intentos = 0

            while not colocado and intentos < 50: #50 es solo un limite, quiero evitar que se haga infinito
                    fila = random.randint(0, 9)      #lugar al azar en fila
                    columna = random.randint(0, 10 - largo) #misma cosa, le resto "largo" para que no se pase del limite de 10
             

                    espacio_libre = True 
                    for j in range(largo):
                        if matriz[fila][columna + j] != 0: #reviso que exista espacio 
                        
                            espacio_libre = False 
                            break
                    
                    if espacio_libre == True:
                        for j in range(largo):
                            matriz[fila][columna + j] = 1
                    
                        colocado = True

                    intentos += 1

            if not colocado:
                    print(f" No se pudo colocar el ultimo {largo}")
                    
    
    return matriz


#barcos de matriz_20

def barcos_de_matriz_20(matriz)->list:
    unos = [
            (2, 4),  #2 grupo de largo 4 (acorazado)
            (4, 3),  #4 grupos de largo 3 (cruceros)
            (6, 2),  #6 grupos de largo 2 (destructores)
            (8, 1),  #8 uno solo (submarino)
        
        ]

    for tupla in unos: #separo la tupla en 2, IZQ= cantidad de unos, DER= veces que se insertan los unos de la izquierda
        cantidad = tupla[0] 
        largo = tupla[1]
        for i in range(cantidad):
            colocado = False
            intentos = 0

            while not colocado and intentos < 100: # es solo un limite, quiero evitar que se haga infinito
                    fila = random.randint(0, 19)      #lugar al azar en fila
                    columna = random.randint(0, 20 - largo) #misma cosa, le resto "largo" para que no se pase del limite de 20
                

                    espacio_libre = True 
                    for j in range(largo):
                        if matriz[fila][columna + j] != 0: #reviso que exista espacio 
                        
                            espacio_libre = False 
                            break
                    
                    if espacio_libre == True:
                        for j in range(largo):
                            matriz[fila][columna + j] = 1
                    
                        colocado = True

                    intentos += 1
                    if columna + largo > len(matriz[0]): #no confio en mis calculos jaja, si hay alguna que se pasa del limite la voy a ignorar
                        continue
            if not colocado:
                    print(f" No se pudo colocar el ultimo {largo}")
                 

    return matriz


def barcos_de_matriz_40(matriz)->list:
    unos = [
            (3, 4),  #2 grupo de largo 4 (acorazado)   1
            (6, 3),  #4 grupos de largo 3 (cruceros)  2 
            (9, 2),  #6 grupos de largo 2 (destructores)  3 
            (12, 1),  #8 uno solo (submarino)   4
        
        ]

    for tupla in unos: #separo la tupla en 2, IZQ= cantidad de unos, DER= veces que se insertan los unos de la izquierda
        cantidad = tupla[0] 
        largo = tupla[1]
        for i in range(cantidad):
            colocado = False
            intentos = 0

            while not colocado and intentos < 100: # es solo un limite, quiero evitar que se haga infinito
                    fila = random.randint(0, 39)      #lugar al azar en fila
                    columna = random.randint(0, 40 - largo) #misma cosa, le resto "largo" para que no se pase del limite de 20
                

                    espacio_libre = True 
                    for j in range(largo):
                        if matriz[fila][columna + j] != 0: #reviso que exista espacio 
                        
                            espacio_libre = False 
                            break
                    
                    if espacio_libre == True:
                        for j in range(largo):
                            matriz[fila][columna + j] = 1
                    
                        colocado = True

                    intentos += 1
                    if columna + largo > len(matriz[0]): #no confio en mis calculos jaja, si hay alguna que se pasa del limite la voy a ignorar
                        continue
            if not colocado:
                    print(f" No se pudo colocar el ultimo {largo}")
                 

    return matriz



#escenario 

def dibujar_escenario(pantalla, tamaño:int,columna:int,fila:int):

    for filass in range(fila):
        for columnass in range(columna):
            rectangulo_agua = pg.Rect(columnass * tamaño, filass * tamaño, tamaño, tamaño)
            pg.draw.rect(pantalla, (0,0,200), rectangulo_agua)
            pg.draw.rect(pantalla, (0,0,0), rectangulo_agua, 1)
            

#dibujar los barcos (requiere la matriz)
#esto ademas de dibujarlos en pantalla, devuelve los rectangulos que dibuje en una lista 


def dibujar_barcos(pantalla,matriz:list,tamaño):

    lista_de_barcos = []

    for filass in range(len(matriz)):
        for columnass in range(len(matriz[0])):
            
            if matriz[filass][columnass] == 1:
                rectangulo = pg.Rect(columnass * tamaño, filass * tamaño, tamaño, tamaño)
                pg.draw.rect(pantalla,(0,0,200),rectangulo)
                pg.draw.rect(pantalla, (0, 0, 0), rectangulo, 1)
                
                lista_de_barcos.append(rectangulo)
                    
    
    
    return lista_de_barcos
            


def funcion_teclado(evento):
        if evento.type == pg.KEYDOWN:
            if evento.key == pg.K_ESCAPE:
                pass
                
            elif evento.key == pg.K_p:
                pg.mixer.music.pause()
            elif evento.key == pg.K_m:
                pg.mixer.music.stop()
            

        if evento.type == pg.KEYUP:
            print(" ")
        

#funcion volver atras
def funcion_atras_pausa(evento,pantalla_actual):
    if evento.type == pg.KEYDOWN:
        if evento.key == pg.K_ESCAPE:
            pantalla_actual = "inicio"
            print("se apretó esc")
    
    return pantalla_actual




#pausa - despausa
def pausar_despausar(evento):
    if evento.type == pg.KEYDOWN:
        if evento.key == pg.K_p: # P = pausa 
            pg.mixer.music.pause()
            print("sonido pausado")
        if evento.key == pg.K_o: #O = despausa
            pg.mixer.music.unpause()
            print("Sonido reanudado")




#dibuja los disparos hechos al agua
def blit_de_agua_10(disparos_realizados,matriz_10,tamaño1,pantalla,correccion_disparo_agua):
    for fila_a, columna_a in disparos_realizados:
        if matriz_10[fila_a][columna_a] == 0:
            x = columna_a * tamaño1
            y = fila_a * tamaño1

            pantalla.blit(correccion_disparo_agua, (x,y))

#para matriz de 20
def blit_de_agua_20(disparos_realizados,matriz_20,tamaño2,pantalla,correccion_disparo_agua_20):
    for fila_a, columna_a in disparos_realizados:
        if matriz_20[fila_a][columna_a] == 0:
            x = columna_a * tamaño2
            y = fila_a * tamaño2

            pantalla.blit(correccion_disparo_agua_20, (x,y))

#para matriz de 40
def blit_de_agua_40(disparos_realizados,matriz_40,tamaño3,pantalla,correccion_disparo_agua_40):
    for fila_a, columna_a in disparos_realizados:
        if matriz_40[fila_a][columna_a] == 0:
            x = columna_a * tamaño3
            y = fila_a * tamaño3

            pantalla.blit(correccion_disparo_agua_40, (x,y))




#REINICIAR | requiere que le pase "evento" y "bandera_barcos"
def reiniciar_partida(evento,booleano,pantalla_actual,disparos_realizados,disparos_acertados,puntaje): 
    if evento.type == pg.KEYDOWN and evento.key ==pg.K_r:
        booleano = False
        disparos_realizados.clear() #vacio la lista de disparos para reiniciar la funcion
        disparos_acertados.clear()
        puntaje[0] -= puntaje[0]
        

    return booleano





def detectar_barco_destruido(lista_barcos_generados,fila_a,columna_a,disparos_acertados,puntaje,destruido):
    for barco in lista_barcos_generados:
        if (fila_a, columna_a) in barco:
            destruido = True

            for parte in barco:
                if parte not in disparos_acertados:
                    destruido = False
                    break

            if destruido:
                puntos_extra = 10 * len(barco)
                puntaje[0] += puntos_extra
                print(f"barco completo hundido + {puntos_extra} puntos")

        return puntaje

def fuego_y_agua(evento,tamaño1,lista_barcos_10,disparos_realizados,pantalla,matriz_10,correccion_disparo_agua,
                 disparos_acertados,puntaje,lista_barcos_generados,destruido):
    
    if evento.type == pg.MOUSEBUTTONDOWN and evento.button == 1:
        colision = False #uso esta bandera para diferenciar si disparo al agua o a un barco
        
        fila_a = evento.pos[1] // tamaño1  
        columna_a = evento.pos[0] // tamaño1

        for rectangulancio in lista_barcos_10:  #rectangulancio = rectangulo, el nombre estúpido es para no confundir variables 
            if rectangulancio.collidepoint(evento.pos): #esto esta para detectar click en los barcos 

                posicion_fuego = (columna_a * tamaño1, fila_a * tamaño1)
                colision = False
                
                if posicion_fuego not in disparos_acertados:
                    disparos_acertados.append(posicion_fuego)
                    puntaje[0] +=5
                    print(f"{puntaje[0]}")
                    print("disparo acertado ")
                    for barco in lista_barcos_generados: #los barcos son tuplas en la lista 
                        if (fila_a, columna_a) in barco: #busco la tupla en la lista 
                            destruido = True

                            #no leido o mal identado, no entra a esta parte 
                            for parte in barco: #le puse parte, porque ubica "partes" del barco si tiene mas de un casillero
                                pos_pixeles = (parte[1] * tamaño1, parte[0] * tamaño1) #parte[1] = x | parte[0] = y
                                if pos_pixeles not in disparos_acertados:
                                    destruido = False
                                    break
                        if destruido == True :
                            puntos_extra = 10 * len(barco)
                            puntaje[0] += puntos_extra
                            print(f"barco completo hundido + {puntos_extra} puntos")
                            
               
                else:
                    print("ya disparaste en esa posicion")



        #agua
        if not colision: 
            if (fila_a >= 0 and fila_a < 10) and (columna_a >= 0 and columna_a <10):
                disparo = (fila_a, columna_a)
                
                
                if disparo in disparos_realizados: #esto detecta si disparé dos veces en el mismo punto
                    print("Ya disparaste en esa posicion") 
                else:
                    disparos_realizados.append(disparo)
                    puntaje[0] -=1 
                    print(f"{puntaje[0]}")
    
    blit_de_agua_10(disparos_realizados,matriz_10,tamaño1,pantalla,correccion_disparo_agua)
    


def fuego_y_agua_20(evento,tamaño2,lista_barcos_20,disparos_realizados,pantalla,matriz_20,correccion_disparo_agua_20,
                 disparos_acertados,puntaje,lista_barcos_generados_20,destruido):
    
    if evento.type == pg.MOUSEBUTTONDOWN and evento.button == 1:
        colision = False #uso esta bandera para diferenciar si disparo al agua o a un barco
        
        fila_a = evento.pos[1] // tamaño2  
        columna_a = evento.pos[0] // tamaño2

        for rectangulancio in lista_barcos_20:  #rectangulancio = rectangulo, el nombre estúpido es para no confundir variables 
            if rectangulancio.collidepoint(evento.pos): #esto esta para detectar click en los barcos 

                posicion_fuego = (columna_a * tamaño2, fila_a * tamaño2)
                colision = True
                
                if posicion_fuego not in disparos_acertados:
                    disparos_acertados.append(posicion_fuego)
                    puntaje[0] +=5
                    print(f"{puntaje[0]}")
                    print("disparo acertado ")
                    for barco in lista_barcos_generados_20: #los barcos son tuplas en la lista 
                        if (fila_a, columna_a) in barco: #busco la tupla en la lista 
                            destruido = True


                            #no leido o mal identado, no entra a esta parte 
                            for parte in barco: #le puse parte, porque ubica "partes" del barco si tiene mas de un casillero
                                pos_pixeles = (parte[1] * tamaño2, parte[0] * tamaño2) #parte[1] = x | parte[0] = y
                                if pos_pixeles not in disparos_acertados:
                                    destruido = False
                                    break
                        if destruido:
                            puntos_extra = 10 * len(barco)
                            puntaje[0] += puntos_extra
                            print(f"barco completo hundido + {puntos_extra} puntos")

               
                else:
                    print("ya disparaste en esa posicion")


        
        if not colision: 
            if (fila_a >= 0 and fila_a < 20) and (columna_a >= 0 and columna_a <20):
                disparo = (fila_a, columna_a)
                
                
                if disparo in disparos_realizados: #esto detecta si disparé dos veces en el mismo punto
                    print("Ya disparaste en esa posicion") 
                else:
                    disparos_realizados.append(disparo)
                    puntaje[0] -=1 
                    print(f"{puntaje[0]}")
    blit_de_agua_20(disparos_realizados,matriz_20,tamaño2,pantalla,correccion_disparo_agua_20)



def fuego_y_agua_40(evento,tamaño3,lista_barcos_40,disparos_realizados,pantalla,matriz_40,correccion_disparo_agua_40,
                 disparos_acertados,puntaje,lista_barcos_generados_40,destruido):
    
    if evento.type == pg.MOUSEBUTTONDOWN and evento.button == 1:
        colision = False #uso esta bandera para diferenciar si disparo al agua o a un barco
        
        fila_a = evento.pos[1] // tamaño3  
        columna_a = evento.pos[0] // tamaño3

        for rectangulancio in lista_barcos_40:  #rectangulancio = rectangulo, el nombre estúpido es para no confundir variables 
            if rectangulancio.collidepoint(evento.pos): #esto esta para detectar click en los barcos 

                posicion_fuego = (columna_a * tamaño3, fila_a * tamaño3)
                colision = True
                
                if posicion_fuego not in disparos_acertados:
                    disparos_acertados.append(posicion_fuego)
                    puntaje[0] +=5
                    print(f"{puntaje[0]}")
                    print("disparo acertado ")
                    for barco in lista_barcos_generados_40: #los barcos son tuplas en la lista 
                        if (fila_a, columna_a) in barco: #busco la tupla en la lista 
                            destruido = True

                            for parte in barco: #le puse parte, porque ubica "partes" del barco si tiene mas de un casillero
                                pos_pixeles = (parte[1] * tamaño3, parte[0] * tamaño3) #parte[1] = x | parte[0] = y
                                if pos_pixeles not in disparos_acertados:
                                    destruido = False
                                    break
                        if destruido:
                            puntos_extra = 10 * len(barco)
                            puntaje[0] += puntos_extra
                            print(f"barco completo hundido + {puntos_extra} puntos")

               
                else:
                    print("ya disparaste en esa posicion")


        
        if not colision: 
            if (fila_a >= 0 and fila_a < 40) and (columna_a >= 0 and columna_a <40):
                disparo = (fila_a, columna_a)
                
                
                if disparo in disparos_realizados: #esto detecta si disparé dos veces en el mismo punto
                    print("Ya disparaste en esa posicion") 
                else:
                    disparos_realizados.append(disparo)  #guardo la tupla 
                    puntaje[0] -=1 
                    print(f"{puntaje[0]}")
    blit_de_agua_40(disparos_realizados,matriz_40,tamaño3,pantalla,correccion_disparo_agua_40)
    



    

